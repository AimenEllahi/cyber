/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 untitled.glb --transform
*/

import React, { useRef, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { ScrollTrigger } from "gsap/ScrollTrigger";
import * as THREE from "three";
import { useControls } from "leva";
import { gsap } from "gsap";

export function Model(props) {
  const group = useRef();
  const { nodes, materials, animations, scene } = useGLTF(
    "/character-transformed.glb"
  );
  const clips = animations;
  const mixer = useRef();
  const texture = new THREE.TextureLoader().load("/body.jpg");
  const dress = new THREE.TextureLoader().load("/Pink2.jpg");
  const hair = new THREE.TextureLoader().load("/hair.jpg");
  const eyelashes = new THREE.TextureLoader().load("/eyelashes.jpg");
  useEffect(() => {
    mixer.current = new THREE.AnimationMixer(group.current);

    if (clips && clips.length > 0) {
      const animationAction = mixer.current.clipAction(clips[0]);
      animationAction.play();
      mixer.current.update(0.2);
    }

    return () => {
      // Clean up the mixer when the component is unmounted
      mixer.current.stopAllAction();
    };
  }, [clips]);

  useEffect(() => {
    const t1 = gsap.timeline();

    t1.to(group.current.rotation, {
      z: 0.2,
    })
      .to(group.current.rotation, {
        z: -0.2,
      })
      .to(group.current.rotation, {
        z: 0,
      });
    ScrollTrigger.create({
      trigger: "#page",
      animation: t1,
      start: "top top",
      end: "+4000px",
      scrub: 1,

      onUpdate: (self) => {
        if (mixer.current) {
          mixer.current.setTime(self.progress * 30);
        }
      },
    });
  }, []);
  return (
    <group scale={0.45} {...props} dispose={null}>
      <group name='Scene'>
        <group
          ref={group}
          name='Armature'
          position={[0.1, -1.279000000000005, 9.908999999999986]}
          rotation={[Math.PI / 2 + 0.2, 0.1, 0]}
          scale={0.01}
        >
          <primitive object={nodes.mixamorigHips} />
        </group>
        <skinnedMesh
          name='Dress'
          geometry={nodes.Dress.geometry}
          material={nodes.Dress.material}
          skeleton={nodes.Dress.skeleton}
          position={[12.47, 5.721, 5.609]}
          rotation={[Math.PI / 2, 0, -1.685]}
          scale={0.01}
        >
          <meshStandardMaterial
            attach='material'
            map={dress}
            roughness={0.8}
            metalness={0.1}
          />
        </skinnedMesh>
        <skinnedMesh
          name='Eyelashes'
          geometry={nodes.Eyelashes.geometry}
          material={nodes.Eyelashes.material}
          skeleton={nodes.Eyelashes.skeleton}
          position={[12.47, 5.721, 5.609]}
          rotation={[Math.PI / 2, 0, -1.685]}
          scale={0.01}
        >
          {" "}
          <meshPhysicalMaterial
            attach='material'
            map={eyelashes}
            roughness={0.8}
            metalness={0.1}
          />
        </skinnedMesh>
        <skinnedMesh
          name='Hair'
          geometry={nodes.Hair.geometry}
          material={nodes.Hair.material}
          skeleton={nodes.Hair.skeleton}
          position={[12.47, 5.721, 5.609]}
          rotation={[Math.PI / 2, 0, -1.685]}
          scale={0.01}
        >
          <meshPhysicalMaterial
            attach='material'
            map={hair}
            color={"#ffffff"}
            roughness={0.8}
            metalness={0.1}
          />
        </skinnedMesh>
        <skinnedMesh
          name='Heels'
          geometry={nodes.Heels.geometry}
          material={nodes.Heels.material}
          skeleton={nodes.Heels.skeleton}
          position={[12.47, 5.721, 5.609]}
          rotation={[Math.PI / 2, 0, -1.685]}
          scale={0.01}
        />
        <skinnedMesh
          name='Main_Body'
          geometry={nodes.Main_Body.geometry}
          material={nodes.Main_Body.material}
          skeleton={nodes.Main_Body.skeleton}
          position={[12.47, 5.721, 5.609]}
          rotation={[Math.PI / 2, 0, -1.685]}
          scale={0.01}
        >
          <meshPhysicalMaterial
            attach='material'
            map={texture}
            color={"#ffffff"}
            roughness={0.8}
            metalness={0.1}
          />
        </skinnedMesh>
        <skinnedMesh
          name='Pants'
          geometry={nodes.Pants.geometry}
          material={nodes.Pants.material}
          skeleton={nodes.Pants.skeleton}
          position={[12.47, 5.721, 5.609]}
          rotation={[Math.PI / 2, 0, -1.685]}
          scale={0.01}
        >
          <meshPhysicalMaterial attach='material' map={dress} />
        </skinnedMesh>
      </group>
    </group>
  );
}

useGLTF.preload("/character-transformed.glb");
